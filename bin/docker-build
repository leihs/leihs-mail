#!/bin/bash
set -exu

# NOTE: this works exactly like `bin/build`, but runs inside a docker container.

MAIL_IMAGE_NAME="leihs-mail"
VERSION_NAME="${VERSION_NAME:-dev}"
IMAGE_WORKDIR="/leihs/mail"
DIST_DIR="target"
tag="${MAIL_IMAGE_NAME}:${VERSION_NAME}"

mail_DIR="$(dirname ${BASH_SOURCE})/.."
cd "${mail_DIR}"
echo "PWD: $PWD"

mail_TREE_ID="$(git log -n1 --format="%T" HEAD)"
mail_SHORT_TREE_ID="$(git log -n1 --format="%t" HEAD)"
mail_COMMIT_ID="$(git log -n1 --format="%H" HEAD)"

docker buildx build \
  --build-arg "WORKDIR=${IMAGE_WORKDIR}" \
  --build-arg "GIT_TREE_ID=${mail_TREE_ID}" \
  --build-arg "GIT_COMMIT_ID=${mail_COMMIT_ID}" \
  -t "$tag" .

# add more tags based on git state, if the working tree is clean
source bin/require-clean-working-tree
if check-clean-working-tree; then
  main_tag="${MAIL_IMAGE_NAME}:tree-${mail_SHORT_TREE_ID}"
  docker image tag "$tag" "$main_tag"
  docker image tag "$tag" "${MAIL_IMAGE_NAME}:commit-${mail_COMMIT_ID}"
  # print this as the "main" tag
  tag="$main_tag"
fi

docker image inspect "${tag}"

# extract uberjar from image / copy to host filesystem
rm -rf "${DIST_DIR}" && mkdir -p "${DIST_DIR}"
container_id="$(docker create "$tag")"
docker cp -La "$container_id:${IMAGE_WORKDIR}/${DIST_DIR}/." "${DIST_DIR}/"
docker rm "$container_id"
ls -la "${DIST_DIR}"

echo "${tag}"
